// <auto-generated />
using System;
using CODWER.RERU.Evaluation.Data.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CODWER.RERU.Evaluation.Data.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220411115835_Add-Document_Templates")]
    partial class AddDocument_Templates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Documents.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Documents.DocumentTemplateKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.ToTable("DocumentTemplateKeys");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EmailTestNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EmailTestNotifications");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TillDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventEvaluator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowUserName")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("EventId");

                    b.ToTable("EventEvaluators");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EventResponsiblePersons");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventTestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("EventTestTemplates");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Places")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.LocationClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationClients");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.LocationResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("LocationResponsiblePersons");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageCode")
                        .HasColumnType("text");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InternalId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionUnitId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("TillDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.PlanResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PlanResponsiblePersons");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<Guid>("PdfFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPoints")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("QuestionType");

                    b.HasIndex("Status");

                    b.ToTable("QuestionUnits");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionUnitTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionUnitId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionUnitTags");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.SolicitedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SolicitedTestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SolicitedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SolicitedTestStatus");

                    b.HasIndex("TestTemplateId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SolicitedTests");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccumulatedPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EvaluatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxErrors")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProgrammedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ResultStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("ShowUserName")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TestPassStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TestStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ResultStatus");

                    b.HasIndex("TestPassStatus");

                    b.HasIndex("TestStatus");

                    b.HasIndex("TestTemplateId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AnswerValue")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestCategoryQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateQuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionUnitId");

                    b.HasIndex("TestTemplateQuestionCategoryId");

                    b.ToTable("TestCategoryQuestions");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AnswerStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Verified")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerStatus");

                    b.HasIndex("QuestionUnitId");

                    b.HasIndex("TestId");

                    b.HasIndex("Verified");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoriesSequence")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MinPercent")
                        .HasColumnType("integer");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PdfFileId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Rules")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSequence");

                    b.HasIndex("Mode");

                    b.HasIndex("Status");

                    b.ToTable("TestTemplates");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplateQuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoryIndex")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int>("SelectionType")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceType")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("QuestionType");

                    b.HasIndex("SelectionType");

                    b.HasIndex("SequenceType");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("TestTemplateQuestionCategories");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplateSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("CanViewPollProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewResultWithoutVerification")
                        .HasColumnType("boolean");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FormulaForMultipleAnswers")
                        .HasColumnType("integer");

                    b.Property<int>("FormulaForOneAnswer")
                        .HasColumnType("integer");

                    b.Property<bool>("HidePagination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxErrors")
                        .HasColumnType("integer");

                    b.Property<bool?>("NegativeScoreForMultipleAnswers")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NegativeScoreForOneAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossibleChangeAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossibleGetToSkipped")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionsCountPerPage")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowManyQuestionPerPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartAfterProgrammation")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartBeforeProgrammation")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartWithoutConfirmation")
                        .HasColumnType("boolean");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormulaForMultipleAnswers");

                    b.HasIndex("FormulaForOneAnswer");

                    b.HasIndex("TestTemplateId")
                        .IsUnique();

                    b.ToTable("TestTemplateSettings");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CoreUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Idnp")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.AnswerStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnswerStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "None"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Viewed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Skipped"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Answered"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.FileTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FileTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TestTemplate"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Test"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.QuestionTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QuestionTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FreeText"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MultipleAnswers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "OneAnswer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HashedAnswer"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.QuestionUnitStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QuestionUnitStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.ScoreFormulaEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScoreFormulaEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ZeroPercent"
                        },
                        new
                        {
                            Id = 1,
                            Name = "OneDivideCountPercent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MinusCorrectOption"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SelectionEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SelectionEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "All"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Select"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SequenceEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SequenceEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Random"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Strict"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SolicitedTestStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SolicitedTestStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "New"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestPassStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestPassStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Forbidden"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Allowed"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestResultStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestResultStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NoResult"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Passed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NotPassed"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Programmed"
                        },
                        new
                        {
                            Id = 1,
                            Name = "AlowedToStart"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Terminated"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Verified"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestTemplateModeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestTemplateModeEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Test"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Poll"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestTemplateStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestTemplateStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestingLocationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestingLocationType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Class"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ComputerClass"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.VerificationStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VerificationStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "VerifiedBySystem"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Verified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NotVerified"
                        });
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Documents.DocumentTemplate", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("FileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Documents.DocumentTemplateKey", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("FileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EmailTestNotification", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Test", "Test")
                        .WithMany("EmailTestNotifications")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("EmailTestNotifications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Event", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Plan", "Plan")
                        .WithMany("Events")
                        .HasForeignKey("PlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventEvaluator", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany("EventEvaluators")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventLocation", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany("EventLocations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Location", "Location")
                        .WithMany("EventLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventResponsiblePerson", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany("EventResponsiblePersons")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("EventResponsiblePersons")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventTestTemplate", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany("EventTestTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("EventTestTemplates")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.EventUser", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Location", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestingLocationType>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.LocationClient", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Location", "Location")
                        .WithMany("LocationClients")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.LocationResponsiblePerson", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Location", "Location")
                        .WithMany("LocationResponsiblePersons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("LocationResponsiblePersons")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Notification", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("Notifications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Option", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany("Options")
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionUnit");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.PlanResponsiblePerson", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Plan", "Plan")
                        .WithMany("PlanResponsiblePersons")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("PlanResponsiblePersons")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("QuestionUnits")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.QuestionTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("QuestionType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.QuestionUnitStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionUnitTag", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany("QuestionUnitTags")
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Tag", "Tag")
                        .WithMany("QuestionUnitTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionUnit");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.SolicitedTest", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SolicitedTestStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("SolicitedTestStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany()
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TestTemplate");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Test", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "Evaluator")
                        .WithMany("Tests")
                        .HasForeignKey("EvaluatorId");

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Event", "Event")
                        .WithMany("Tests")
                        .HasForeignKey("EventId");

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestResultStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("ResultStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestPassStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("TestPassStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("TestStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("Tests")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("TestsWithEvaluator")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("TestTemplate");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestAnswer", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestQuestion", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestCategoryQuestion", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany()
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestTemplateQuestionCategory", "TestTemplateQuestionCategory")
                        .WithMany("TestCategoryQuestions")
                        .HasForeignKey("TestTemplateQuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionUnit");

                    b.Navigation("TestTemplateQuestionCategory");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestQuestion", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.AnswerStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("AnswerStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.VerificationStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Verified")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("QuestionUnit");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SequenceEnum>", null)
                        .WithMany()
                        .HasForeignKey("CategoriesSequence")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestTemplateModeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Mode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.TestTemplateStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplateQuestionCategory", b =>
                {
                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany()
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.QuestionTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("QuestionType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SelectionEnum>", null)
                        .WithMany()
                        .HasForeignKey("SelectionType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.SequenceEnum>", null)
                        .WithMany()
                        .HasForeignKey("SequenceType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("TestTemplateQuestionCategories")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionCategory");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplateSettings", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.ScoreFormulaEnum>", null)
                        .WithMany()
                        .HasForeignKey("FormulaForMultipleAnswers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Evaluation.Data.Entities.Enums.ScoreFormulaEnum>", null)
                        .WithMany()
                        .HasForeignKey("FormulaForOneAnswer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", null)
                        .WithOne("Settings")
                        .HasForeignKey("CODWER.RERU.Evaluation.Data.Entities.TestTemplateSettings", "TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Event", b =>
                {
                    b.Navigation("EventEvaluators");

                    b.Navigation("EventLocations");

                    b.Navigation("EventResponsiblePersons");

                    b.Navigation("EventTestTemplates");

                    b.Navigation("EventUsers");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Location", b =>
                {
                    b.Navigation("EventLocations");

                    b.Navigation("LocationClients");

                    b.Navigation("LocationResponsiblePersons");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Plan", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PlanResponsiblePersons");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionCategory", b =>
                {
                    b.Navigation("QuestionUnits");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.QuestionUnit", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("QuestionUnitTags");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Tag", b =>
                {
                    b.Navigation("QuestionUnitTags");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.Test", b =>
                {
                    b.Navigation("EmailTestNotifications");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestQuestion", b =>
                {
                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplate", b =>
                {
                    b.Navigation("EventTestTemplates");

                    b.Navigation("Settings");

                    b.Navigation("Tests");

                    b.Navigation("TestTemplateQuestionCategories");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.TestTemplateQuestionCategory", b =>
                {
                    b.Navigation("TestCategoryQuestions");
                });

            modelBuilder.Entity("CODWER.RERU.Evaluation.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("EmailTestNotifications");

                    b.Navigation("EventResponsiblePersons");

                    b.Navigation("EventUsers");

                    b.Navigation("LocationResponsiblePersons");

                    b.Navigation("Notifications");

                    b.Navigation("PlanResponsiblePersons");

                    b.Navigation("Tests");

                    b.Navigation("TestsWithEvaluator");
                });
#pragma warning restore 612, 618
        }
    }
}
