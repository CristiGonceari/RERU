// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RERU.Data.Persistence.Context;

namespace CODWER.RERU.IdentityMigrator.Console.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230526130521_Add_Field_IsGridTest_For_TestTemplate")]
    partial class Add_Field_IsGridTest_For_TestTemplate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("RERU.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleCore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CoreArticles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleCoreModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ArticleCoreModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEv360", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Ev360Articles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEv360ModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ArticleEv360ModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("EvaluationArticles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEvaluationModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ArticleEvaluationModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.Autobiography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.ToTable("Autobiographies");
                });

            modelBuilder.Entity("RERU.Data.Entities.Bulletin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmittedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentsResidenceAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReleaseDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ResidenceAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.HasIndex("ParentsResidenceAddressId");

                    b.HasIndex("ResidenceAddressId");

                    b.ToTable("Bulletins");
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidateCitizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CitizenshipName")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TranslateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CandidateCitizens");
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidateNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NationalityName")
                        .HasColumnType("text");

                    b.Property<int>("TranslateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CandidateNationalities");
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidatePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicalColumn")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalColumn");

                    b.ToTable("CandidatePositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidatePositionNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CandidatePositionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidatePositionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CandidatePositionNotifications");
                });

            modelBuilder.Entity("RERU.Data.Entities.Documents.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("RERU.Data.Entities.Documents.DocumentTemplateKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<int?>("TranslateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.ToTable("DocumentTemplateKeys");
                });

            modelBuilder.Entity("RERU.Data.Entities.DocumentsForSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("DocumentsForSign");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HtmlTemplateAddress")
                        .HasColumnType("text");

                    b.Property<bool>("InUpdateProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSend")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("EmailNotifications");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailNotificationProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("EmailNotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("KeyToReplace")
                        .HasColumnType("text");

                    b.Property<string>("ValueToReplace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailNotificationId");

                    b.ToTable("EmailNotificationProperties");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailTestNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EmailTestNotifications");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmployeeFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ColaboratorId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("EmployeeFunctions");
                });

            modelBuilder.Entity("RERU.Data.Entities.Evaluation360.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AdministrativeActOfStudies")
                        .HasColumnType("text");

                    b.Property<string>("AdministrativeActService")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("CheckComment1")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CheckComment2")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CheckComment3")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CheckComment4")
                        .HasColumnType("boolean");

                    b.Property<string>("CommentsEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("CommentsEvaluator")
                        .HasColumnType("text");

                    b.Property<int?>("CounterSignerUserProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("CourseName")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateAcceptOrRejectEvaluated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateCompletionCounterSigner")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateCompletionGeneralData")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEvaluatedKnow")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEvaluationInterview")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateLiftingSanction")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateSanctionApplication")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateSettingIindividualGoals")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EducationEnum")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluatedUserProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluatorUserProfileId")
                        .HasColumnType("integer");

                    b.Property<int?>("FinalEvaluationQualification")
                        .HasColumnType("integer");

                    b.Property<string>("FinalScorePartialEvaluations")
                        .HasColumnType("text");

                    b.Property<string>("FunctionEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("Goal1")
                        .HasColumnType("text");

                    b.Property<string>("Goal2")
                        .HasColumnType("text");

                    b.Property<string>("Goal3")
                        .HasColumnType("text");

                    b.Property<string>("Goal4")
                        .HasColumnType("text");

                    b.Property<string>("Goal5")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KPI1")
                        .HasColumnType("text");

                    b.Property<string>("KPI2")
                        .HasColumnType("text");

                    b.Property<string>("KPI3")
                        .HasColumnType("text");

                    b.Property<string>("KPI4")
                        .HasColumnType("text");

                    b.Property<string>("KPI5")
                        .HasColumnType("text");

                    b.Property<string>("Need1ProfessionalDevelopmentEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("Need2ProfessionalDevelopmentEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("Need3ProfessionalDevelopmentEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("Need4ProfessionalDevelopmentEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("Need5ProfessionalDevelopmentEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("OtherComments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PartialEvaluationPeriodFromTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PartialEvaluationPeriodUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("PartialEvaluationScore")
                        .HasColumnType("numeric");

                    b.Property<string>("PerformanceTerm1")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceTerm2")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceTerm3")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceTerm4")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceTerm5")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PeriodEvaluatedFromTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PeriodEvaluatedUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PeriodRunningActivityFromTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PeriodRunningActivityUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Points")
                        .HasColumnType("numeric");

                    b.Property<int?>("ProfessionalTrainingActivities")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfessionalTrainingActivitiesType")
                        .HasColumnType("integer");

                    b.Property<int?>("QualificationEvaluationObtained2YearsPast")
                        .HasColumnType("integer");

                    b.Property<int?>("QualificationEvaluationObtainedPreviousYear")
                        .HasColumnType("integer");

                    b.Property<int?>("QualificationQuarter1")
                        .HasColumnType("integer");

                    b.Property<int?>("QualificationQuarter2")
                        .HasColumnType("integer");

                    b.Property<int?>("QualificationQuarter3")
                        .HasColumnType("integer");

                    b.Property<int?>("QualificationQuarter4")
                        .HasColumnType("integer");

                    b.Property<int?>("QualifierPartialEvaluations")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Question1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question10")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question11")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question12")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question13")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question3")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question4")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question5")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question6")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question7")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question8")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Question9")
                        .HasColumnType("numeric");

                    b.Property<int?>("SanctionApplied")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Score2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Score3")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Score4")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Score5")
                        .HasColumnType("numeric");

                    b.Property<int?>("ServiceDuringEvaluationCourse")
                        .HasColumnType("integer");

                    b.Property<bool?>("SignatureAcknowledgeEvaluated")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SignatureCounterSigner")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SignatureEvaluated")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SignatureEvaluator")
                        .HasColumnType("boolean");

                    b.Property<int?>("SpecialOrMilitaryGrade")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialOrMilitaryGradeText")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubdivisionEvaluated")
                        .HasColumnType("text");

                    b.Property<string>("SubdivisionName")
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounterSignerUserProfileId");

                    b.HasIndex("EducationEnum");

                    b.HasIndex("EvaluatedUserProfileId");

                    b.HasIndex("EvaluatorUserProfileId");

                    b.HasIndex("FinalEvaluationQualification");

                    b.HasIndex("ProfessionalTrainingActivities");

                    b.HasIndex("ProfessionalTrainingActivitiesType");

                    b.HasIndex("QualificationEvaluationObtained2YearsPast");

                    b.HasIndex("QualificationEvaluationObtainedPreviousYear");

                    b.HasIndex("QualificationQuarter1");

                    b.HasIndex("QualificationQuarter2");

                    b.HasIndex("QualificationQuarter3");

                    b.HasIndex("QualificationQuarter4");

                    b.HasIndex("QualifierPartialEvaluations");

                    b.HasIndex("SanctionApplied");

                    b.HasIndex("ServiceDuringEvaluationCourse");

                    b.HasIndex("SpecialOrMilitaryGrade");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("RERU.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TillDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventEvaluator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("EventId");

                    b.ToTable("EventEvaluators");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EventResponsiblePersons");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventTestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("EventTestTemplates");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CandidatePositionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidatePositionId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventUserCandidatePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CandidatePositionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidatePositionId");

                    b.HasIndex("EventUserId");

                    b.ToTable("EventUserCandidatePositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventVacantPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CandidatePositionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidatePositionId");

                    b.HasIndex("EventId");

                    b.ToTable("EventVacantPositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.FileTestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("FileTestAnswers");
                });

            modelBuilder.Entity("RERU.Data.Entities.KinshipRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthLocation")
                        .HasColumnType("text");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KinshipDegree")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddress")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkLocation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("KinshipDegree");

                    b.ToTable("KinshipRelations");
                });

            modelBuilder.Entity("RERU.Data.Entities.KinshipRelationCriminalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.ToTable("KinshipRelationCriminalDatas");
                });

            modelBuilder.Entity("RERU.Data.Entities.KinshipRelationWithUserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KinshipDegree")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Subdivision")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("KinshipDegree");

                    b.ToTable("KinshipRelationWithUserProfiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Places")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RERU.Data.Entities.LocationClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationClients");
                });

            modelBuilder.Entity("RERU.Data.Entities.LocationResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("LocationResponsiblePersons");
                });

            modelBuilder.Entity("RERU.Data.Entities.MaterialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaterialStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.HasIndex("MaterialStatusTypeId");

                    b.ToTable("MaterialStatuses");
                });

            modelBuilder.Entity("RERU.Data.Entities.MaterialStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TranslateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("MaterialStatusTypes");
                });

            modelBuilder.Entity("RERU.Data.Entities.MilitaryObligation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Efectiv")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndObligationPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InstitutionAdress")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MilitaryBookletEminentAuthority")
                        .HasColumnType("text");

                    b.Property<int?>("MilitaryBookletNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MilitaryBookletReleaseDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MilitaryBookletSeries")
                        .HasColumnType("text");

                    b.Property<int?>("MilitaryObligationType")
                        .HasColumnType("integer");

                    b.Property<string>("MilitarySpecialty")
                        .HasColumnType("text");

                    b.Property<DateTime?>("MobilizationYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartObligationPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WithdrawalYear")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("MilitaryObligationType");

                    b.ToTable("MilitaryObligations");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModernLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TranslateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ModernLanguages");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModernLanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KnowledgeQuelifiers")
                        .HasColumnType("integer");

                    b.Property<int>("ModernLanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("KnowledgeQuelifiers");

                    b.HasIndex("ModernLanguageId");

                    b.ToTable("ModernLanguageLevels");
                });

            modelBuilder.Entity("RERU.Data.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("InternalGatewayAPIPath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("PublicUrl")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModulePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModulePermissions");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAssignByDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Type");

                    b.ToTable("ModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModuleRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModulePermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModulePermissionId");

                    b.HasIndex("ModuleRoleId");

                    b.ToTable("ModuleRolePermissions");
                });

            modelBuilder.Entity("RERU.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageCode")
                        .HasColumnType("text");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RERU.Data.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InternalId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionUnitId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ArticlePersonalModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ArticlePersonalModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Configurations.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Configurations.VacationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ChildBirthLeaveDays")
                        .HasColumnType("integer");

                    b.Property<int>("ChildCareLeaveDays")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeathLeaveDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("FridayIsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeHolidayDays")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeOffDays")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MarriageLeaveDays")
                        .HasColumnType("integer");

                    b.Property<bool>("MondayIsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<int>("NonPaidLeaveDays")
                        .HasColumnType("integer");

                    b.Property<int>("PaidLeaveDays")
                        .HasColumnType("integer");

                    b.Property<int>("PaternalistLeaveDays")
                        .HasColumnType("integer");

                    b.Property<bool>("SaturdayIsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<int>("StudyLeaveDays")
                        .HasColumnType("integer");

                    b.Property<bool>("SundayIsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("ThursdayIsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("TuesdayIsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("WednesdayIsWorkDay")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("VacationConfigurations");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Type");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CandidateCitizenshipId")
                        .HasColumnType("integer");

                    b.Property<int?>("CandidateNationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HomePhone")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Sex")
                        .HasColumnType("integer");

                    b.Property<int?>("StateLanguageLevel")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("CandidateCitizenshipId");

                    b.HasIndex("CandidateNationalityId");

                    b.HasIndex("Sex");

                    b.HasIndex("StateLanguageLevel");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ContractorDepartments");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Attestation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Attestations");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.DismissalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("PositionId");

                    b.HasIndex("Status");

                    b.ToTable("DismissalRequests");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("InstructorLastName")
                        .HasColumnType("text");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Thematic")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Penalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Penalizations");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("GeneratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("No")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<int>("ProbationDayPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("WorkHours")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkHours");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Mentions")
                        .HasColumnType("text");

                    b.Property<int>("RankRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("RankRecordId");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ChildAge")
                        .HasColumnType("integer");

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<int>("CountDays")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Mentions")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VacationOrderId")
                        .HasColumnType("text");

                    b.Property<string>("VacationRequestId")
                        .HasColumnType("text");

                    b.Property<int>("VacationType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Status");

                    b.HasIndex("VacationType");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorLocalPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("GetBulletinData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetCimData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetDocumentsDataCim")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetDocumentsDataIdentity")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetDocumentsDataOrders")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetDocumentsDataRequest")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetDocumentsDataVacation")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetFamilyComponentData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetGeneralData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetPositionsData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetRanksData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetStudiesData")
                        .HasColumnType("boolean");

                    b.Property<bool>("GetTimeSheetTableData")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.ToTable("ContractorPermissions");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ColaboratorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.DepartmentRoleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("DepartmentRoleContents");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.ToTable("HrDocumentTemplates");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("HrDocumentTemplateCategories");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplateKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("HrDocumentCategoriesId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("HrDocumentCategoriesId");

                    b.ToTable("HrDocumentTemplateKeys");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("RelationId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("RelationId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Files.ContractorFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("ContractorFiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.IndividualContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BrutSalary")
                        .HasColumnType("integer");

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CurrencyTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NetSalary")
                        .HasColumnType("integer");

                    b.Property<string>("No")
                        .HasColumnType("text");

                    b.Property<int?>("SuperiorId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VacationDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("SuperiorId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NomenclatureTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureTypeId");

                    b.HasIndex("Type");

                    b.ToTable("NomenclatureColumns");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NomenclatureTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureTypeId");

                    b.ToTable("NomenclatureRecords");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NomenclatureColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("NomenclatureRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureColumnId");

                    b.HasIndex("NomenclatureRecordId");

                    b.ToTable("RecordValues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecordValue");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BaseNomenclature")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseNomenclature");

                    b.ToTable("NomenclatureTypes");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.DepartmentRoleRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationalChartId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationalChartId");

                    b.ToTable("DepartmentRoleRelations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DepartmentRoleRelation");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationalChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("OrganizationalCharts");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("ColaboratorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortCode")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.TimeSheetTables.TimeSheetTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Value");

                    b.ToTable("TimeSheetTables");
                });

            modelBuilder.Entity("RERU.Data.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("TillDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("RERU.Data.Entities.PlanResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PlanResponsiblePersons");
                });

            modelBuilder.Entity("RERU.Data.Entities.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Done")
                        .HasColumnType("integer");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("ProcessesEnumType")
                        .HasColumnType("integer");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProcessesEnumType");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<Guid>("PdfFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPoints")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("QuestionType");

                    b.HasIndex("Status");

                    b.ToTable("QuestionUnits");
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionUnitTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionUnitId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionUnitTags");
                });

            modelBuilder.Entity("RERU.Data.Entities.RecommendationForStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Subdivision")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("RecommendationForStudies");
                });

            modelBuilder.Entity("RERU.Data.Entities.RegistrationFluxStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("InProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Step");

                    b.HasIndex("UserProfileId");

                    b.ToTable("RegistrationFluxSteps");
                });

            modelBuilder.Entity("RERU.Data.Entities.RequiredDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("RequiredDocuments");
                });

            modelBuilder.Entity("RERU.Data.Entities.RequiredDocumentPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CandidatePositionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RequiredDocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidatePositionId");

                    b.HasIndex("RequiredDocumentId");

                    b.ToTable("RequiredDocumentPositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.SignedDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentsForSignId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("SignRequestId")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsForSignId");

                    b.HasIndex("Status");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SignedDocuments");
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CandidatePositionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SolicitedPositionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidatePositionId");

                    b.HasIndex("SolicitedPositionStatus");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SolicitedVacantPositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPositionEmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MessageType");

                    b.ToTable("SolicitedVacantPositionEmailMessages");
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPositionUserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RequiredDocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("SolicitedVacantPositionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequiredDocumentId");

                    b.HasIndex("SolicitedVacantPositionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("SolicitedVacantPositionUserFiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreditCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndStudyPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Faculty")
                        .HasColumnType("text");

                    b.Property<string>("GraduationYear")
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartStudyPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StudyActNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StudyActRelaseDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StudyActSeries")
                        .HasColumnType("text");

                    b.Property<int?>("StudyCourse")
                        .HasColumnType("integer");

                    b.Property<int?>("StudyFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("StudyProfile")
                        .HasColumnType("integer");

                    b.Property<int?>("StudyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("YearOfAdmission")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("StudyCourse");

                    b.HasIndex("StudyFrequency");

                    b.HasIndex("StudyProfile");

                    b.HasIndex("StudyTypeId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("RERU.Data.Entities.StudyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TranslateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StudyTypes");
                });

            modelBuilder.Entity("RERU.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RERU.Data.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccumulatedPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndProgrammedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EvaluatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int?>("FinalAccumulatedPercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("FinalStatusResult")
                        .HasColumnType("integer");

                    b.Property<string>("HashGroupKey")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxErrors")
                        .HasColumnType("integer");

                    b.Property<string>("NotRecommendedFor")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProgrammedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecommendedFor")
                        .HasColumnType("text");

                    b.Property<int>("ResultStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SolicitedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TestPassStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TestStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("EventId");

                    b.HasIndex("FinalStatusResult");

                    b.HasIndex("LocationId");

                    b.HasIndex("ResultStatus");

                    b.HasIndex("TestPassStatus");

                    b.HasIndex("TestStatus");

                    b.HasIndex("TestTemplateId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AnswerValue")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestCategoryQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateQuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionUnitId");

                    b.HasIndex("TestTemplateQuestionCategoryId");

                    b.ToTable("TestCategoryQuestions");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AnswerStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HashGroupKey")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Verified")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerStatus");

                    b.HasIndex("QuestionUnitId");

                    b.HasIndex("TestId");

                    b.HasIndex("Verified");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestQuestionTestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TestAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TestAnswerId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestQuestionsTestAnswers");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BasicTestTemplate")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesSequence")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsGridTest")
                        .HasColumnType("boolean");

                    b.Property<int>("MinPercent")
                        .HasColumnType("integer");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PdfFileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("QualifyingType")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Rules")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasicTestTemplate");

                    b.HasIndex("CategoriesSequence");

                    b.HasIndex("Mode");

                    b.HasIndex("QualifyingType");

                    b.HasIndex("Status");

                    b.ToTable("TestTemplates");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModuleRoleId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("TestTemplateModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateQuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoryIndex")
                        .HasColumnType("integer");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int>("SelectionType")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceType")
                        .HasColumnType("integer");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("QuestionType");

                    b.HasIndex("SelectionType");

                    b.HasIndex("SequenceType");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("TestTemplateQuestionCategories");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("CanViewPollProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewResultWithoutVerification")
                        .HasColumnType("boolean");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FormulaForMultipleAnswers")
                        .HasColumnType("integer");

                    b.Property<int>("FormulaForOneAnswer")
                        .HasColumnType("integer");

                    b.Property<bool>("HidePagination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxErrors")
                        .HasColumnType("integer");

                    b.Property<bool?>("NegativeScoreForMultipleAnswers")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NegativeScoreForOneAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossibleChangeAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossibleGetToSkipped")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionsCountPerPage")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowManyQuestionPerPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartAfterProgrammation")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartBeforeProgrammation")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartWithoutConfirmation")
                        .HasColumnType("boolean");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormulaForMultipleAnswers");

                    b.HasIndex("FormulaForOneAnswer");

                    b.HasIndex("TestTemplateId")
                        .IsUnique();

                    b.ToTable("TestTemplateSettings");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("RequiredDocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequiredDocumentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccessModeEnum")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DepartmentColaboratorId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("FunctionColaboratorId")
                        .HasColumnType("integer");

                    b.Property<string>("Idnp")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MediaFileId")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresDataEntry")
                        .HasColumnType("boolean");

                    b.Property<int?>("RoleColaboratorId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TokenLifetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccessModeEnum");

                    b.HasIndex("DepartmentColaboratorId");

                    b.HasIndex("FunctionColaboratorId");

                    b.HasIndex("RoleColaboratorId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfileIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Identificator")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileIdentity");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfileModuleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreateById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModuleRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModuleRoleId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileModuleRoles");
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CVU.ERP.StorageService.Entities.FileTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FileTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "question"
                        },
                        new
                        {
                            Id = 2,
                            Name = "testtemplate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "test"
                        },
                        new
                        {
                            Id = 4,
                            Name = "media"
                        },
                        new
                        {
                            Id = 5,
                            Name = "documents"
                        },
                        new
                        {
                            Id = 6,
                            Name = "identityfiles"
                        },
                        new
                        {
                            Id = 7,
                            Name = "photos"
                        },
                        new
                        {
                            Id = 8,
                            Name = "request"
                        },
                        new
                        {
                            Id = 9,
                            Name = "order"
                        },
                        new
                        {
                            Id = 10,
                            Name = "cim"
                        },
                        new
                        {
                            Id = 11,
                            Name = "procesfile"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AccessModeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccessModeEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "OnlyCandidates"
                        },
                        new
                        {
                            Id = 1,
                            Name = "CurrentDepartment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AllDepartments"
                        },
                        new
                        {
                            Id = 3,
                            Name = "All"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AnswerStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnswerStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "None"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Viewed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Skipped"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Answered"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.BasicTestTemplateEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BasicTestTemplateEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PregatireGenerala"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PregatireDeSpecialitate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "InstructiaTragerii"
                        },
                        new
                        {
                            Id = 4,
                            Name = "InterventiaProfesionala"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EducationEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EducationEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Secondary"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Higher"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Doctorate"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EvaluationStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Schiță"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmată"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Acceptată"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Respinsă"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Contrasemnată"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Respinsă_contrasemnatar"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Finisată"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EvaluationTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Execuție"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Conducere"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.GradesEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GradesEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General_colonel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "General_locotenent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "General_maior"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Colonel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Locotenent_colonel"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Maior"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Capitan"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Locotenent_major"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Locotenent_sublocotenent"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Plutonier_adjutant"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Plutonier_major"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Plutonier"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sergent_major"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Sergent"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sergent_inferior_caporal_soldat"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Agent"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Agent_superior"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Agent_principal"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Agent_sef_adjunct"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Agent_sef"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Agent_sef_principal"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Inspector"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Inspector_superior"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Inspector_principal"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Comisar"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Comisar_principal"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Comisar_sef"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Chestor"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Chestor_sef"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Chestor_general"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Sergent_inferior_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Sergent_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Sergent_major_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Plutonier_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Plutonier_major_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Plutonier_adjutant_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Locotenent_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Locotenent_major_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Capitan_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Maior_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Locotenent_colonel_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Colonel_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 43,
                            Name = "General_maior_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 44,
                            Name = "General_locotenent_al_serviciului_intern"
                        },
                        new
                        {
                            Id = 45,
                            Name = "General_colonel_al_serviciului_intern"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KinshipDegreeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("KinshipDegreeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Father"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mother"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Brother"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sister"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Wife"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Husband"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 9,
                            Name = "HusbandsBrothers"
                        },
                        new
                        {
                            Id = 10,
                            Name = "HusbandsSisters"
                        },
                        new
                        {
                            Id = 11,
                            Name = "WifesSisters"
                        },
                        new
                        {
                            Id = 12,
                            Name = "WifesBrothers"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KnowledgeQuelifiersEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("KnowledgeQuelifiersEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BasicKnowledge"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VeryGood"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MedicalColumnEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MedicalColumnEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Column1"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Column2"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Column3"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Column4"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MilitaryObligationTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MilitaryObligationTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Recruit"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Disobedient"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PerformedMilitaryService"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AlternativeService"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MilitaryChair"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleStatus>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ModuleStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Offline"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Online"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ModuleTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Dynamic"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProcessesEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProcessesEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BulkAddUsers"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BulkAddTests"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProfessionalTrainingActivitiesEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Perfectiosation"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Specialization"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProfessionalTrainingActivitiesType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Intern"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Extern"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QualifiersEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dissatisfied"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Satisfied"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VeryGood"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifyingTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QualifyingTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PassedNotPassed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AbleNotAble"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AcceptedRejected"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Recommended"
                        },
                        new
                        {
                            Id = 5,
                            Name = "NoQualifying"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QuestionTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FreeText"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MultipleAnswers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "OneAnswer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HashedAnswer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "FileAnswer"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionUnitStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("QuestionUnitStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RegistrationFluxStepEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RegistrationFluxStepEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GeneralData"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bulletin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Study"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MaterialStatus"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MilitaryObligation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Autobiography"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Declaration"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RoleTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoleTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dynamic"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SanctionEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SanctionEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Without"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Warning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reprimand"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HarshRebuke"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Downgrade"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Demotion"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dismissal"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ScoreFormulaEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScoreFormulaEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "ZeroPercent"
                        },
                        new
                        {
                            Id = 1,
                            Name = "OneDivideCountPercent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MinusCorrectOption"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SelectionEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SelectionEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "All"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Select"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SequenceEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SequenceEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Random"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Strict"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ServiceDuringEvaluationCourse>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServiceDuringEvaluationCourse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Employment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Transfer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Detachment"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SexTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SexTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SignRequestStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SignRequestStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Success"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedPositionStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SolicitedPositionStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "New"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wait"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedVacantPositionEmailMessageEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SolicitedVacantPositionEmailMessageEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Approve"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Reject"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Waiting"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StateLanguageLevel>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StateLanguageLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VeryGood"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StudyFrequencyEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StudyFrequencyEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LowFrequency"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestPassStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestPassStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Forbidden"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Allowed"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestResultStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestResultStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "NoResult"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Passed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NotPassed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Able"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NotAble"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Recommended"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Programmed"
                        },
                        new
                        {
                            Id = 1,
                            Name = "AlowedToStart"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Terminated"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Verified"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateModeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestTemplateModeEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Test"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Poll"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Evaluation"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestTemplateStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestingLocationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestingLocationType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Class"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ComputerClass"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.VerificationStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VerificationStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "VerifiedBySystem"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Verified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NotVerified"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.BaseNomenclatureTypesEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BaseNomenclatureTypesEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BloodTypes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Currency"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rank"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FamilyComponent"
                        },
                        new
                        {
                            Id = 5,
                            Name = "StudyType"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.ContactTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContactTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.FieldTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FieldTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Character"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Integer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Boolean"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Date"
                        },
                        new
                        {
                            Id = 7,
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StageStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StageStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyCourseType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StudyCourseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Initial"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Perfecting"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Specialization"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Retraining"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyProfileEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StudyProfileEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Real"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Humanist"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Arts"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Etc"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.TimeSheetValueEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TimeSheetValueEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Six"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nine"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ten"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Eleven"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Twelve"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Twenty_Four"
                        },
                        new
                        {
                            Id = 100,
                            Name = "R"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Sn"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Ls"
                        },
                        new
                        {
                            Id = 103,
                            Name = "C"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Cn"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Cm"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Cc"
                        },
                        new
                        {
                            Id = 107,
                            Name = "D"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Sp"
                        },
                        new
                        {
                            Id = 109,
                            Name = "St"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Șt"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Dt"
                        },
                        new
                        {
                            Id = 112,
                            Name = "A"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Cs"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Dh"
                        },
                        new
                        {
                            Id = 115,
                            Name = "M"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.VacationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VacationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PaidAnnual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studies"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Death"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ChildCare"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BirthOfTheChild"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Marriage"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Paternal"
                        },
                        new
                        {
                            Id = 8,
                            Name = "OwnVacation"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.WorkHoursEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("WorkHoursEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Six"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nine"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ten"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Eleven"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Twelve"
                        },
                        new
                        {
                            Id = 100,
                            Name = "ByCumulation"
                        });
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueBoolean", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<bool?>("Value")
                        .HasColumnType("boolean")
                        .HasColumnName("ValueAsBoolean");

                    b.HasDiscriminator().HasValue("RecordValueBoolean");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueChar", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<char?>("Value")
                        .HasColumnType("character(1)")
                        .HasColumnName("ValueAsChar");

                    b.HasDiscriminator().HasValue("RecordValueChar");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueDate", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<DateTime?>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ValueAsDateTime");

                    b.HasDiscriminator().HasValue("RecordValueDate");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueDateTime", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<DateTime?>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ValueAsDateTime");

                    b.HasDiscriminator().HasValue("RecordValueDateTime");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueDouble", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("ValueAsDouble");

                    b.HasDiscriminator().HasValue("RecordValueDouble");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueEmail", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<string>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ValueAsText");

                    b.HasDiscriminator().HasValue("RecordValueEmail");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueInteger", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<int?>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("ValueAsInteger");

                    b.HasDiscriminator().HasValue("RecordValueInteger");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueText", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<string>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("ValueAsText");

                    b.HasDiscriminator().HasValue("RecordValueText");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentDepartmentChildDepartment", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ChildDepartmentId");

                    b.Property<int?>("ParentDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ParentDepartmentId");

                    b.HasIndex("ChildDepartmentId");

                    b.HasIndex("ParentDepartmentId");

                    b.HasDiscriminator().HasValue("ParentDepartmentChildDepartment");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentDepartmentChildRole", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ChildRoleId");

                    b.Property<int?>("ParentDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ParentDepartmentId");

                    b.HasIndex("ChildRoleId");

                    b.HasIndex("ParentDepartmentId");

                    b.HasDiscriminator().HasValue("ParentDepartmentChildRole");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentRoleChildDepartment", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ChildDepartmentId");

                    b.Property<int?>("ParentRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ParentRoleId");

                    b.HasIndex("ChildDepartmentId");

                    b.HasIndex("ParentRoleId");

                    b.HasDiscriminator().HasValue("ParentRoleChildDepartment");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentRoleChildRole", b =>
                {
                    b.HasBaseType("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ChildRoleId");

                    b.Property<int?>("ParentRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("ParentRoleId");

                    b.HasIndex("ChildRoleId");

                    b.HasIndex("ParentRoleId");

                    b.HasDiscriminator().HasValue("ParentRoleChildRole");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleCoreModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.ArticleCore", "Article")
                        .WithMany("ArticleRoles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.ModuleRole", "Role")
                        .WithMany("ArticleCoreRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEv360ModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.ArticleEv360", "Article")
                        .WithMany("ArticleRoles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.ModuleRole", "Role")
                        .WithMany("ArticleEv360Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEvaluationModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.ArticleEvaluation", "Article")
                        .WithMany("ArticleRoles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.ModuleRole", "Role")
                        .WithMany("ArticleEvaluationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.Autobiography", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithOne("Autobiography")
                        .HasForeignKey("RERU.Data.Entities.Autobiography", "ContractorId");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.Bulletin", b =>
                {
                    b.HasOne("RERU.Data.Entities.Address", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithOne("Bulletin")
                        .HasForeignKey("RERU.Data.Entities.Bulletin", "ContractorId");

                    b.HasOne("RERU.Data.Entities.Address", "ParentsResidenceAddress")
                        .WithMany()
                        .HasForeignKey("ParentsResidenceAddressId");

                    b.HasOne("RERU.Data.Entities.Address", "ResidenceAddress")
                        .WithMany()
                        .HasForeignKey("ResidenceAddressId");

                    b.Navigation("BirthPlace");

                    b.Navigation("Contractor");

                    b.Navigation("ParentsResidenceAddress");

                    b.Navigation("ResidenceAddress");
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidatePosition", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MedicalColumnEnum>", null)
                        .WithMany()
                        .HasForeignKey("MedicalColumn")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidatePositionNotification", b =>
                {
                    b.HasOne("RERU.Data.Entities.CandidatePosition", "CandidatePosition")
                        .WithMany("CandidatePositionNotifications")
                        .HasForeignKey("CandidatePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("CandidatePositionNotifications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidatePosition");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.Documents.DocumentTemplate", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CVU.ERP.StorageService.Entities.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("FileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.Documents.DocumentTemplateKey", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CVU.ERP.StorageService.Entities.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("FileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.DocumentsForSign", b =>
                {
                    b.HasOne("RERU.Data.Entities.Test", "Test")
                        .WithMany("DocumentsForSign")
                        .HasForeignKey("TestId");

                    b.HasOne("RERU.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("DocumentsForSign")
                        .HasForeignKey("TestTemplateId");

                    b.Navigation("Test");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailNotificationProperty", b =>
                {
                    b.HasOne("RERU.Data.Entities.EmailNotification", "EmailNotification")
                        .WithMany("Properties")
                        .HasForeignKey("EmailNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailNotification");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailTestNotification", b =>
                {
                    b.HasOne("RERU.Data.Entities.Test", "Test")
                        .WithMany("EmailTestNotifications")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("EmailTestNotifications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmployeeFunction", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.Evaluation360.Evaluation", b =>
                {
                    b.HasOne("RERU.Data.Entities.UserProfile", "CounterSignerUserProfile")
                        .WithMany()
                        .HasForeignKey("CounterSignerUserProfileId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EducationEnum>", null)
                        .WithMany()
                        .HasForeignKey("EducationEnum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RERU.Data.Entities.UserProfile", "EvaluatedUserProfile")
                        .WithMany()
                        .HasForeignKey("EvaluatedUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "EvaluatorUserProfile")
                        .WithMany()
                        .HasForeignKey("EvaluatorUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("FinalEvaluationQualification")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesEnum>", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalTrainingActivities")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesType>", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalTrainingActivitiesType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualificationEvaluationObtained2YearsPast")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualificationEvaluationObtainedPreviousYear")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualificationQuarter1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualificationQuarter2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualificationQuarter3")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualificationQuarter4")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualifierPartialEvaluations")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SanctionEnum>", null)
                        .WithMany()
                        .HasForeignKey("SanctionApplied")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ServiceDuringEvaluationCourse>", null)
                        .WithMany()
                        .HasForeignKey("ServiceDuringEvaluationCourse")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.GradesEnum>", null)
                        .WithMany()
                        .HasForeignKey("SpecialOrMilitaryGrade")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CounterSignerUserProfile");

                    b.Navigation("EvaluatedUserProfile");

                    b.Navigation("EvaluatorUserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.Event", b =>
                {
                    b.HasOne("RERU.Data.Entities.Plan", "Plan")
                        .WithMany("Events")
                        .HasForeignKey("PlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventEvaluator", b =>
                {
                    b.HasOne("RERU.Data.Entities.UserProfile", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("EventEvaluators")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventLocation", b =>
                {
                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("EventLocations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.Location", "Location")
                        .WithMany("EventLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventResponsiblePerson", b =>
                {
                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("EventResponsiblePersons")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("EventResponsiblePersons")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventTestTemplate", b =>
                {
                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("EventTestTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("EventTestTemplates")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventUser", b =>
                {
                    b.HasOne("RERU.Data.Entities.CandidatePosition", "CandidatePosition")
                        .WithMany("EventUsers")
                        .HasForeignKey("CandidatePositionId");

                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidatePosition");

                    b.Navigation("Event");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventUserCandidatePosition", b =>
                {
                    b.HasOne("RERU.Data.Entities.CandidatePosition", "CandidatePosition")
                        .WithMany("EventUserCandidatePositions")
                        .HasForeignKey("CandidatePositionId");

                    b.HasOne("RERU.Data.Entities.EventUser", "EventUser")
                        .WithMany("EventUserCandidatePositions")
                        .HasForeignKey("EventUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidatePosition");

                    b.Navigation("EventUser");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventVacantPosition", b =>
                {
                    b.HasOne("RERU.Data.Entities.CandidatePosition", "CandidatePosition")
                        .WithMany()
                        .HasForeignKey("CandidatePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("EventVacantPositions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidatePosition");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("RERU.Data.Entities.FileTestAnswer", b =>
                {
                    b.HasOne("RERU.Data.Entities.TestQuestion", "TestQuestion")
                        .WithMany("FileTestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("RERU.Data.Entities.KinshipRelation", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("KinshipRelations")
                        .HasForeignKey("ContractorId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KinshipDegreeEnum>", null)
                        .WithMany()
                        .HasForeignKey("KinshipDegree")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.KinshipRelationCriminalData", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithOne("KinshipRelationCriminalData")
                        .HasForeignKey("RERU.Data.Entities.KinshipRelationCriminalData", "ContractorId");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.KinshipRelationWithUserProfile", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("KinshipRelationWithUserProfiles")
                        .HasForeignKey("ContractorId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KinshipDegreeEnum>", null)
                        .WithMany()
                        .HasForeignKey("KinshipDegree")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.Location", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestingLocationType>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.LocationClient", b =>
                {
                    b.HasOne("RERU.Data.Entities.Location", "Location")
                        .WithMany("LocationClients")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RERU.Data.Entities.LocationResponsiblePerson", b =>
                {
                    b.HasOne("RERU.Data.Entities.Location", "Location")
                        .WithMany("LocationResponsiblePersons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("LocationResponsiblePersons")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.MaterialStatus", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithOne("MaterialStatus")
                        .HasForeignKey("RERU.Data.Entities.MaterialStatus", "ContractorId");

                    b.HasOne("RERU.Data.Entities.MaterialStatusType", "MaterialStatusType")
                        .WithMany()
                        .HasForeignKey("MaterialStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("MaterialStatusType");
                });

            modelBuilder.Entity("RERU.Data.Entities.MilitaryObligation", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("MilitaryObligations")
                        .HasForeignKey("ContractorId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MilitaryObligationTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("MilitaryObligationType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModernLanguageLevel", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("ModernLanguageLevels")
                        .HasForeignKey("ContractorId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KnowledgeQuelifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("KnowledgeQuelifiers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.ModernLanguage", "ModernLanguage")
                        .WithMany()
                        .HasForeignKey("ModernLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("ModernLanguage");
                });

            modelBuilder.Entity("RERU.Data.Entities.Module", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleStatus>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.ModulePermission", b =>
                {
                    b.HasOne("RERU.Data.Entities.Module", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.ModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.Module", "Module")
                        .WithMany("Roles")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RoleTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModuleRolePermission", b =>
                {
                    b.HasOne("RERU.Data.Entities.ModulePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("ModulePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.ModuleRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.Notification", b =>
                {
                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("Notifications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.Option", b =>
                {
                    b.HasOne("RERU.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany("Options")
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionUnit");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ArticlePersonalModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Article", "Article")
                        .WithMany("ArticleRoles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.ModuleRole", "Role")
                        .WithMany("ArticlePersonalRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Contact", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Contacts")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.ContactTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Contractor", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId");

                    b.HasOne("RERU.Data.Entities.CandidateCitizenship", "CandidateCitizenship")
                        .WithMany()
                        .HasForeignKey("CandidateCitizenshipId");

                    b.HasOne("RERU.Data.Entities.CandidateNationality", "CandidateNationality")
                        .WithMany()
                        .HasForeignKey("CandidateNationalityId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SexTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Sex")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StateLanguageLevel>", null)
                        .WithMany()
                        .HasForeignKey("StateLanguageLevel")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithOne("Contractor")
                        .HasForeignKey("RERU.Data.Entities.PersonalEntities.Contractor", "UserProfileId");

                    b.Navigation("BloodType");

                    b.Navigation("CandidateCitizenship");

                    b.Navigation("CandidateNationality");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorAvatar", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithOne("Avatar")
                        .HasForeignKey("RERU.Data.Entities.PersonalEntities.ContractorAvatar", "ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorDepartment", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("ContractorDepartments")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Attestation", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Attestations")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Badge", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Badges")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Bonus", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Bonuses")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.DismissalRequest", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.ContractorEvents.Position", "Position")
                        .WithMany("DismissalRequests")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StageStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Instruction", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Instructions")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Penalization", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Penalizations")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Position", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Positions")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.WorkHoursEnum>", null)
                        .WithMany()
                        .HasForeignKey("WorkHours")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Rank", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Ranks")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "RankRecord")
                        .WithMany()
                        .HasForeignKey("RankRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("RankRecord");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Vacation", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Vacations")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StageStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.VacationType>", null)
                        .WithMany()
                        .HasForeignKey("VacationType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorLocalPermission", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithOne("Permission")
                        .HasForeignKey("RERU.Data.Entities.PersonalEntities.ContractorLocalPermission", "ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.DepartmentRoleContent", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "Department")
                        .WithMany("DepartmentRoleContents")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "Role")
                        .WithMany("DepartmentRoleContents")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplate", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CVU.ERP.StorageService.Entities.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("FileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplateKey", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplateCategory", "HrDocumentCategories")
                        .WithMany("HrDocumentKeys")
                        .HasForeignKey("HrDocumentCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HrDocumentCategories");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.FamilyMember", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Files.ContractorFile", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("ContractorFiles")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.IndividualContract", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Superior")
                        .WithMany("Contractors")
                        .HasForeignKey("SuperiorId");

                    b.Navigation("Contractor");

                    b.Navigation("Superior");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureColumn", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureType", "NomenclatureType")
                        .WithMany("NomenclatureColumns")
                        .HasForeignKey("NomenclatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.FieldTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NomenclatureType");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureType", "NomenclatureType")
                        .WithMany("NomenclatureRecords")
                        .HasForeignKey("NomenclatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NomenclatureType");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureColumn", "NomenclatureColumn")
                        .WithMany()
                        .HasForeignKey("NomenclatureColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "NomenclatureRecord")
                        .WithMany("RecordValues")
                        .HasForeignKey("NomenclatureRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NomenclatureColumn");

                    b.Navigation("NomenclatureRecord");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureType", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.BaseNomenclatureTypesEnum>", null)
                        .WithMany()
                        .HasForeignKey("BaseNomenclature")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.DepartmentRoleRelation", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.OrganizationalChart", "OrganizationalChart")
                        .WithMany()
                        .HasForeignKey("OrganizationalChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationalChart");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.TimeSheetTables.TimeSheetTable", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("TimeSheetTables")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.TimeSheetValueEnum>", null)
                        .WithMany()
                        .HasForeignKey("Value")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.PlanResponsiblePerson", b =>
                {
                    b.HasOne("RERU.Data.Entities.Plan", "Plan")
                        .WithMany("PlanResponsiblePersons")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("PlanResponsiblePersons")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.Process", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProcessesEnum>", null)
                        .WithMany()
                        .HasForeignKey("ProcessesEnumType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionUnit", b =>
                {
                    b.HasOne("RERU.Data.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("QuestionUnits")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("QuestionType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionUnitStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionUnitTag", b =>
                {
                    b.HasOne("RERU.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany("QuestionUnitTags")
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.Tag", "Tag")
                        .WithMany("QuestionUnitTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionUnit");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RERU.Data.Entities.RecommendationForStudy", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("RecommendationForStudies")
                        .HasForeignKey("ContractorId");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.RegistrationFluxStep", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("RegistrationFluxSteps")
                        .HasForeignKey("ContractorId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RegistrationFluxStepEnum>", null)
                        .WithMany()
                        .HasForeignKey("Step")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", null)
                        .WithMany("RegistrationFluxSteps")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("RERU.Data.Entities.RequiredDocumentPosition", b =>
                {
                    b.HasOne("RERU.Data.Entities.CandidatePosition", "CandidatePosition")
                        .WithMany("RequiredDocumentPositions")
                        .HasForeignKey("CandidatePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.RequiredDocument", "RequiredDocument")
                        .WithMany("RequiredDocumentPositions")
                        .HasForeignKey("RequiredDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidatePosition");

                    b.Navigation("RequiredDocument");
                });

            modelBuilder.Entity("RERU.Data.Entities.SignedDocument", b =>
                {
                    b.HasOne("RERU.Data.Entities.DocumentsForSign", "DocumentsForSign")
                        .WithMany("SignedDocuments")
                        .HasForeignKey("DocumentsForSignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SignRequestStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentsForSign");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPosition", b =>
                {
                    b.HasOne("RERU.Data.Entities.CandidatePosition", "CandidatePosition")
                        .WithMany()
                        .HasForeignKey("CandidatePositionId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedPositionStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("SolicitedPositionStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("SolicitedVacantPositions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidatePosition");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPositionEmailMessage", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedVacantPositionEmailMessageEnum>", null)
                        .WithMany()
                        .HasForeignKey("MessageType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPositionUserFile", b =>
                {
                    b.HasOne("RERU.Data.Entities.RequiredDocument", "RequiredDocument")
                        .WithMany()
                        .HasForeignKey("RequiredDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.SolicitedVacantPosition", "SolicitedVacantPosition")
                        .WithMany("SolicitedVacantPositionUserFiles")
                        .HasForeignKey("SolicitedVacantPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("SolicitedVacantPositionUserFiles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDocument");

                    b.Navigation("SolicitedVacantPosition");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.Study", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Contractor", "Contractor")
                        .WithMany("Studies")
                        .HasForeignKey("ContractorId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyCourseType>", null)
                        .WithMany()
                        .HasForeignKey("StudyCourse")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StudyFrequencyEnum>", null)
                        .WithMany()
                        .HasForeignKey("StudyFrequency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyProfileEnum>", null)
                        .WithMany()
                        .HasForeignKey("StudyProfile")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RERU.Data.Entities.StudyType", "StudyType")
                        .WithMany()
                        .HasForeignKey("StudyTypeId");

                    b.Navigation("Contractor");

                    b.Navigation("StudyType");
                });

            modelBuilder.Entity("RERU.Data.Entities.Test", b =>
                {
                    b.HasOne("RERU.Data.Entities.UserProfile", "Evaluator")
                        .WithMany("Tests")
                        .HasForeignKey("EvaluatorId");

                    b.HasOne("RERU.Data.Entities.Event", "Event")
                        .WithMany("Tests")
                        .HasForeignKey("EventId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestResultStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("FinalStatusResult")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RERU.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestResultStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("ResultStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestPassStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("TestPassStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("TestStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("Tests")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("TestsWithEvaluator")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("Event");

                    b.Navigation("Location");

                    b.Navigation("TestTemplate");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestAnswer", b =>
                {
                    b.HasOne("RERU.Data.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.HasOne("RERU.Data.Entities.TestQuestion", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestCategoryQuestion", b =>
                {
                    b.HasOne("RERU.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany()
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestTemplateQuestionCategory", "TestTemplateQuestionCategory")
                        .WithMany("TestCategoryQuestions")
                        .HasForeignKey("TestTemplateQuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionUnit");

                    b.Navigation("TestTemplateQuestionCategory");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestQuestion", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AnswerStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("AnswerStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.QuestionUnit", "QuestionUnit")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.VerificationStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Verified")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("QuestionUnit");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestQuestionTestAnswer", b =>
                {
                    b.HasOne("RERU.Data.Entities.TestAnswer", "TestAnswer")
                        .WithMany("TestQuestionsTestAnswers")
                        .HasForeignKey("TestAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestQuestion", "TestQuestion")
                        .WithMany("TestQuestionsTestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestAnswer");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplate", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.BasicTestTemplateEnum>", null)
                        .WithMany()
                        .HasForeignKey("BasicTestTemplate")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SequenceEnum>", null)
                        .WithMany()
                        .HasForeignKey("CategoriesSequence")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateModeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Mode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifyingTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("QualifyingType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.ModuleRole", "ModuleRole")
                        .WithMany("TestTemplateModuleRoles")
                        .HasForeignKey("ModuleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("TestTemplateModuleRoles")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleRole");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateQuestionCategory", b =>
                {
                    b.HasOne("RERU.Data.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany()
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("QuestionType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SelectionEnum>", null)
                        .WithMany()
                        .HasForeignKey("SelectionType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SequenceEnum>", null)
                        .WithMany()
                        .HasForeignKey("SequenceType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestTemplate", "TestTemplate")
                        .WithMany("TestTemplateQuestionCategories")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionCategory");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateSettings", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ScoreFormulaEnum>", null)
                        .WithMany()
                        .HasForeignKey("FormulaForMultipleAnswers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ScoreFormulaEnum>", null)
                        .WithMany()
                        .HasForeignKey("FormulaForOneAnswer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.TestTemplate", null)
                        .WithOne("Settings")
                        .HasForeignKey("RERU.Data.Entities.TestTemplateSettings", "TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.UserFile", b =>
                {
                    b.HasOne("RERU.Data.Entities.RequiredDocument", "RequiredDocument")
                        .WithMany("UserFiles")
                        .HasForeignKey("RequiredDocumentId");

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("UserFiles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDocument");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfile", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AccessModeEnum>", null)
                        .WithMany()
                        .HasForeignKey("AccessModeEnum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentColaboratorId")
                        .HasPrincipalKey("ColaboratorId");

                    b.HasOne("RERU.Data.Entities.EmployeeFunction", "EmployeeFunction")
                        .WithMany()
                        .HasForeignKey("FunctionColaboratorId")
                        .HasPrincipalKey("ColaboratorId");

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleColaboratorId")
                        .HasPrincipalKey("ColaboratorId");

                    b.Navigation("Department");

                    b.Navigation("EmployeeFunction");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfileIdentity", b =>
                {
                    b.HasOne("RERU.Data.Entities.UserProfile", null)
                        .WithMany("Identities")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfileModuleRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.ModuleRole", "ModuleRole")
                        .WithMany("UserProfileModuleRoles")
                        .HasForeignKey("ModuleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("ModuleRoles")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleRole");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CVU.ERP.StorageService.Entities.FileTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CVU.ERP.StorageService.Entities.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AccessModeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AccessModeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AnswerStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.AnswerStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.BasicTestTemplateEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.BasicTestTemplateEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EducationEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EducationEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.EvaluationTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.GradesEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.GradesEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KinshipDegreeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KinshipDegreeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KnowledgeQuelifiersEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.KnowledgeQuelifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MedicalColumnEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MedicalColumnEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MilitaryObligationTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.MilitaryObligationTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleStatus>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleStatus>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ModuleTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProcessesEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProcessesEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesType>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ProfessionalTrainingActivitiesType>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifiersEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifyingTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QualifyingTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionUnitStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.QuestionUnitStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RegistrationFluxStepEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RegistrationFluxStepEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RoleTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.RoleTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SanctionEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SanctionEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ScoreFormulaEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ScoreFormulaEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SelectionEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SelectionEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SequenceEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SequenceEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ServiceDuringEvaluationCourse>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.ServiceDuringEvaluationCourse>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SexTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SexTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SignRequestStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SignRequestStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedPositionStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedPositionStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedVacantPositionEmailMessageEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.SolicitedVacantPositionEmailMessageEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StateLanguageLevel>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StateLanguageLevel>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StudyFrequencyEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.StudyFrequencyEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestPassStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestPassStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestResultStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestResultStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateModeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateModeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestTemplateStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestingLocationType>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.TestingLocationType>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.VerificationStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.Enums.VerificationStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.BaseNomenclatureTypesEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.BaseNomenclatureTypesEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.ContactTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.ContactTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.FieldTypeEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.FieldTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StageStatusEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StageStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyCourseType>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyCourseType>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyProfileEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.StudyProfileEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.TimeSheetValueEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.TimeSheetValueEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.VacationType>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.VacationType>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.WorkHoursEnum>", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<RERU.Data.Entities.PersonalEntities.Enums.WorkHoursEnum>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentDepartmentChildDepartment", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "ChildDepartment")
                        .WithMany()
                        .HasForeignKey("ChildDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("ChildDepartment");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentDepartmentChildRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "ChildRole")
                        .WithMany()
                        .HasForeignKey("ChildRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("ChildRole");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentRoleChildDepartment", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Department", "ChildDepartment")
                        .WithMany()
                        .HasForeignKey("ChildDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ChildDepartment");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.OrganizationRoleRelations.ParentRoleChildRole", b =>
                {
                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "ChildRole")
                        .WithMany()
                        .HasForeignKey("ChildRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RERU.Data.Entities.PersonalEntities.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ChildRole");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleCore", b =>
                {
                    b.Navigation("ArticleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEv360", b =>
                {
                    b.Navigation("ArticleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ArticleEvaluation", b =>
                {
                    b.Navigation("ArticleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.CandidatePosition", b =>
                {
                    b.Navigation("CandidatePositionNotifications");

                    b.Navigation("EventUserCandidatePositions");

                    b.Navigation("EventUsers");

                    b.Navigation("RequiredDocumentPositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.DocumentsForSign", b =>
                {
                    b.Navigation("SignedDocuments");
                });

            modelBuilder.Entity("RERU.Data.Entities.EmailNotification", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RERU.Data.Entities.Event", b =>
                {
                    b.Navigation("EventEvaluators");

                    b.Navigation("EventLocations");

                    b.Navigation("EventResponsiblePersons");

                    b.Navigation("EventTestTemplates");

                    b.Navigation("EventUsers");

                    b.Navigation("EventVacantPositions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("RERU.Data.Entities.EventUser", b =>
                {
                    b.Navigation("EventUserCandidatePositions");
                });

            modelBuilder.Entity("RERU.Data.Entities.Location", b =>
                {
                    b.Navigation("EventLocations");

                    b.Navigation("LocationClients");

                    b.Navigation("LocationResponsiblePersons");
                });

            modelBuilder.Entity("RERU.Data.Entities.Module", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("RERU.Data.Entities.ModuleRole", b =>
                {
                    b.Navigation("ArticleCoreRoles");

                    b.Navigation("ArticleEv360Roles");

                    b.Navigation("ArticleEvaluationRoles");

                    b.Navigation("ArticlePersonalRoles");

                    b.Navigation("Permissions");

                    b.Navigation("TestTemplateModuleRoles");

                    b.Navigation("UserProfileModuleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Article", b =>
                {
                    b.Navigation("ArticleRoles");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Contractor", b =>
                {
                    b.Navigation("Attestations");

                    b.Navigation("Autobiography");

                    b.Navigation("Avatar");

                    b.Navigation("Badges");

                    b.Navigation("Bonuses");

                    b.Navigation("Bulletin");

                    b.Navigation("Contacts");

                    b.Navigation("ContractorDepartments");

                    b.Navigation("ContractorFiles");

                    b.Navigation("Contractors");

                    b.Navigation("Contracts");

                    b.Navigation("Instructions");

                    b.Navigation("KinshipRelationCriminalData");

                    b.Navigation("KinshipRelations");

                    b.Navigation("KinshipRelationWithUserProfiles");

                    b.Navigation("MaterialStatus");

                    b.Navigation("MilitaryObligations");

                    b.Navigation("ModernLanguageLevels");

                    b.Navigation("Penalizations");

                    b.Navigation("Permission");

                    b.Navigation("Positions");

                    b.Navigation("Ranks");

                    b.Navigation("RecommendationForStudies");

                    b.Navigation("RegistrationFluxSteps");

                    b.Navigation("Studies");

                    b.Navigation("TimeSheetTables");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.ContractorEvents.Position", b =>
                {
                    b.Navigation("DismissalRequests");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Department", b =>
                {
                    b.Navigation("DepartmentRoleContents");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Documents.HrDocumentTemplateCategory", b =>
                {
                    b.Navigation("HrDocumentKeys");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", b =>
                {
                    b.Navigation("RecordValues");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.NomenclatureType.NomenclatureType", b =>
                {
                    b.Navigation("NomenclatureColumns");

                    b.Navigation("NomenclatureRecords");
                });

            modelBuilder.Entity("RERU.Data.Entities.PersonalEntities.Role", b =>
                {
                    b.Navigation("DepartmentRoleContents");
                });

            modelBuilder.Entity("RERU.Data.Entities.Plan", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PlanResponsiblePersons");
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionCategory", b =>
                {
                    b.Navigation("QuestionUnits");
                });

            modelBuilder.Entity("RERU.Data.Entities.QuestionUnit", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("QuestionUnitTags");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("RERU.Data.Entities.RequiredDocument", b =>
                {
                    b.Navigation("RequiredDocumentPositions");

                    b.Navigation("UserFiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.SolicitedVacantPosition", b =>
                {
                    b.Navigation("SolicitedVacantPositionUserFiles");
                });

            modelBuilder.Entity("RERU.Data.Entities.Tag", b =>
                {
                    b.Navigation("QuestionUnitTags");
                });

            modelBuilder.Entity("RERU.Data.Entities.Test", b =>
                {
                    b.Navigation("DocumentsForSign");

                    b.Navigation("EmailTestNotifications");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestAnswer", b =>
                {
                    b.Navigation("TestQuestionsTestAnswers");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestQuestion", b =>
                {
                    b.Navigation("FileTestAnswers");

                    b.Navigation("TestAnswers");

                    b.Navigation("TestQuestionsTestAnswers");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplate", b =>
                {
                    b.Navigation("DocumentsForSign");

                    b.Navigation("EventTestTemplates");

                    b.Navigation("Settings");

                    b.Navigation("Tests");

                    b.Navigation("TestTemplateModuleRoles");

                    b.Navigation("TestTemplateQuestionCategories");
                });

            modelBuilder.Entity("RERU.Data.Entities.TestTemplateQuestionCategory", b =>
                {
                    b.Navigation("TestCategoryQuestions");
                });

            modelBuilder.Entity("RERU.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("CandidatePositionNotifications");

                    b.Navigation("Contractor");

                    b.Navigation("EmailTestNotifications");

                    b.Navigation("EventResponsiblePersons");

                    b.Navigation("EventUsers");

                    b.Navigation("Identities");

                    b.Navigation("LocationResponsiblePersons");

                    b.Navigation("ModuleRoles");

                    b.Navigation("Notifications");

                    b.Navigation("PlanResponsiblePersons");

                    b.Navigation("RegistrationFluxSteps");

                    b.Navigation("SolicitedVacantPositions");

                    b.Navigation("SolicitedVacantPositionUserFiles");

                    b.Navigation("Tests");

                    b.Navigation("TestsWithEvaluator");

                    b.Navigation("UserFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
