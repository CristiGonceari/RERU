// <auto-generated />
using System;
using CODWER.RERU.Personal.Data.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CODWER.RERU.Personal.Data.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220127134229_Add_FileSignature")]
    partial class Add_FileSignature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Configurations.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Configurations.VacationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildBirthLeaveDays")
                        .HasColumnType("int");

                    b.Property<int>("ChildCareLeaveDays")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeathLeaveDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FridayIsWorkDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeHolidayDays")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeOffDays")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MarriageLeaveDays")
                        .HasColumnType("int");

                    b.Property<bool>("MondayIsWorkDay")
                        .HasColumnType("bit");

                    b.Property<int>("NonPaidLeaveDays")
                        .HasColumnType("int");

                    b.Property<int>("PaidLeaveDays")
                        .HasColumnType("int");

                    b.Property<int>("PaternalistLeaveDays")
                        .HasColumnType("int");

                    b.Property<bool>("SaturdayIsWorkDay")
                        .HasColumnType("bit");

                    b.Property<int>("StudyLeaveDays")
                        .HasColumnType("int");

                    b.Property<bool>("SundayIsWorkDay")
                        .HasColumnType("bit");

                    b.Property<bool>("ThursdayIsWorkDay")
                        .HasColumnType("bit");

                    b.Property<bool>("TuesdayIsWorkDay")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WednesdayIsWorkDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VacationConfigurations");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Type");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("Sex");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ContractorDepartments");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Attestation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Attestations");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.DismissalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RequestId");

                    b.HasIndex("Status");

                    b.ToTable("DismissalRequests");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("InstructorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Thematic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Penalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Penalizations");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ProbationDayPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkHours")
                        .HasColumnType("int");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrganizationRoleId");

                    b.HasIndex("WorkHours");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mentions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RankRecordId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("RankRecordId");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildAge")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("CountDays")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mentions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VacationOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("VacationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("VacationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Status");

                    b.HasIndex("VacationOrderId");

                    b.HasIndex("VacationRequestId");

                    b.HasIndex("VacationType");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorLocalPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GetBulletinData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetCimData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetDocumentsDataCim")
                        .HasColumnType("bit");

                    b.Property<bool>("GetDocumentsDataIdentity")
                        .HasColumnType("bit");

                    b.Property<bool>("GetDocumentsDataOrders")
                        .HasColumnType("bit");

                    b.Property<bool>("GetDocumentsDataRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("GetDocumentsDataVacation")
                        .HasColumnType("bit");

                    b.Property<bool>("GetFamilyComponentData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetGeneralData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetPositionsData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetRanksData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetStudiesData")
                        .HasColumnType("bit");

                    b.Property<bool>("GetTimeSheetTableData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.ToTable("ContractorPermissions");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.DepartmentRoleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationRoleCount")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationRoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("DepartmentRoleContents");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Documents.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("RelationId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UniqueFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Type");

                    b.ToTable("ByteFiles");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Files.FileSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("FileId");

                    b.ToTable("FileSignatures");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.IdentityDocuments.Bulletin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idnp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LivingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResidenceAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("ContractorId")
                        .IsUnique();

                    b.HasIndex("LivingAddressId");

                    b.HasIndex("ResidenceAddressId");

                    b.ToTable("Bulletins");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.IndividualContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrutSalary")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NetSalary")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuperiorId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VacationDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("FileId");

                    b.HasIndex("SuperiorId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NomenclatureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureTypeId");

                    b.HasIndex("Type");

                    b.ToTable("NomenclatureColumns");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NomenclatureTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureTypeId");

                    b.ToTable("NomenclatureRecords");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NomenclatureColumnId")
                        .HasColumnType("int");

                    b.Property<int>("NomenclatureRecordId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureColumnId");

                    b.HasIndex("NomenclatureRecordId");

                    b.ToTable("RecordValues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecordValue");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseNomenclature")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseNomenclature");

                    b.ToTable("NomenclatureTypes");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.DepartmentRoleRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationalChartId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationalChartId");

                    b.ToTable("DepartmentRoleRelations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DepartmentRoleRelation");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationalChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrganizationalCharts");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Studies.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiplomaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiplomaReleaseDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActiveStudy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("StudyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("StudyFrequency");

                    b.HasIndex("StudyTypeId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.TimeSheetTables.TimeSheetTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Value");

                    b.ToTable("TimeSheetTables");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.User.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idnp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId")
                        .IsUnique()
                        .HasFilter("[ContractorId] IS NOT NULL");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.BaseNomenclatureTypesEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("BaseNomenclatureTypesEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BloodTypes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Currency"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rank"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FamilyComponent"
                        },
                        new
                        {
                            Id = 5,
                            Name = "StudyType"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.ContactTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ContactTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PhoneNumber"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.FieldTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("FieldTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Character"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Integer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Boolean"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Date"
                        },
                        new
                        {
                            Id = 7,
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.SexTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SexTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.StageStatusEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("StageStatusEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.StudyFrequencyEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("StudyFrequencyEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "La_Zi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Frecventa_Redusa"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.TimeSheetValueEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("TimeSheetValueEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Six"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nine"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ten"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Eleven"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Twelve"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Twenty_Four"
                        },
                        new
                        {
                            Id = 100,
                            Name = "R"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Sn"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Ls"
                        },
                        new
                        {
                            Id = 103,
                            Name = "C"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Cn"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Cm"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Cc"
                        },
                        new
                        {
                            Id = 107,
                            Name = "D"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Sp"
                        },
                        new
                        {
                            Id = 109,
                            Name = "St"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Șt"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Dt"
                        },
                        new
                        {
                            Id = 112,
                            Name = "A"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Cs"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Dh"
                        },
                        new
                        {
                            Id = 115,
                            Name = "M"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.VacationType>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("VacationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PaidAnnual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studies"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Death"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ChildCare"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BirthOfTheChild"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Marriage"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Paternal"
                        },
                        new
                        {
                            Id = 8,
                            Name = "OwnVacation"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.WorkHoursEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("WorkHoursEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Six"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nine"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ten"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Eleven"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Twelve"
                        },
                        new
                        {
                            Id = 100,
                            Name = "ByCumulation"
                        });
                });

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Files.FileTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("FileTypeEnum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Identity"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Request"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Order"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cim"
                        });
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueBoolean", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<bool?>("Value")
                        .HasColumnType("bit")
                        .HasColumnName("ValueAsBoolean");

                    b.HasDiscriminator().HasValue("RecordValueBoolean");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueChar", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("ValueAsChar");

                    b.HasDiscriminator().HasValue("RecordValueChar");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueDate", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<DateTime?>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValueAsDateTime");

                    b.HasDiscriminator().HasValue("RecordValueDate");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueDateTime", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<DateTime?>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2")
                        .HasColumnName("ValueAsDateTime");

                    b.HasDiscriminator().HasValue("RecordValueDateTime");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueDouble", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<double?>("Value")
                        .HasColumnType("float")
                        .HasColumnName("ValueAsDouble");

                    b.HasDiscriminator().HasValue("RecordValueDouble");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueEmail", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<string>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValueAsText");

                    b.HasDiscriminator().HasValue("RecordValueEmail");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueInteger", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasColumnName("ValueAsInteger");

                    b.HasDiscriminator().HasValue("RecordValueInteger");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValueText", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue");

                    b.Property<string>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValueAsText");

                    b.HasDiscriminator().HasValue("RecordValueText");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentDepartmentChildDepartment", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ChildDepartmentId");

                    b.Property<int?>("ParentDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ParentDepartmentId");

                    b.HasIndex("ChildDepartmentId");

                    b.HasIndex("ParentDepartmentId");

                    b.HasDiscriminator().HasValue("ParentDepartmentChildDepartment");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentDepartmentChildOrganizationRole", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildOrganizationRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ChildOrganizationRoleId");

                    b.Property<int?>("ParentDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ParentDepartmentId");

                    b.HasIndex("ChildOrganizationRoleId");

                    b.HasIndex("ParentDepartmentId");

                    b.HasDiscriminator().HasValue("ParentDepartmentChildOrganizationRole");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentOrganizationRoleChildDepartment", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildDepartmentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ChildDepartmentId");

                    b.Property<int?>("ParentOrganizationRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ParentOrganizationRoleId");

                    b.HasIndex("ChildDepartmentId");

                    b.HasIndex("ParentOrganizationRoleId");

                    b.HasDiscriminator().HasValue("ParentOrganizationRoleChildDepartment");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentOrganizationRoleChildOrganizationRole", b =>
                {
                    b.HasBaseType("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.DepartmentRoleRelation");

                    b.Property<int>("ChildOrganizationRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ChildOrganizationRoleId");

                    b.Property<int?>("ParentOrganizationRoleId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("ParentOrganizationRoleId");

                    b.HasIndex("ChildOrganizationRoleId");

                    b.HasIndex("ParentOrganizationRoleId");

                    b.HasDiscriminator().HasValue("ParentOrganizationRoleChildOrganizationRole");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Contact", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Contacts")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.ContactTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Contractor", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.SexTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Sex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorAvatar", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithOne("Avatar")
                        .HasForeignKey("CODWER.RERU.Personal.Data.Entities.ContractorAvatar", "ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorDepartment", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("ContractorDepartments")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Attestation", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Attestations")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Badge", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Badges")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Bonus", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Bonuses")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.DismissalRequest", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Position", "Position")
                        .WithMany("DismissalRequests")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.StageStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Order");

                    b.Navigation("Position");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Instruction", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Instructions")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Penalization", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Penalizations")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Position", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Positions")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.WorkHoursEnum>", null)
                        .WithMany()
                        .HasForeignKey("WorkHours")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Department");

                    b.Navigation("Order");

                    b.Navigation("OrganizationRole");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Rank", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Ranks")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "RankRecord")
                        .WithMany()
                        .HasForeignKey("RankRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("RankRecord");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Vacation", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Vacations")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.StageStatusEnum>", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "VacationOrder")
                        .WithMany()
                        .HasForeignKey("VacationOrderId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "VacationRequest")
                        .WithMany()
                        .HasForeignKey("VacationRequestId");

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.VacationType>", null)
                        .WithMany()
                        .HasForeignKey("VacationType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("VacationOrder");

                    b.Navigation("VacationRequest");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorLocalPermission", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithOne("Permission")
                        .HasForeignKey("CODWER.RERU.Personal.Data.Entities.ContractorLocalPermission", "ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.DepartmentRoleContent", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "Department")
                        .WithMany("DepartmentRoleContents")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("OrganizationRole");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Documents.DocumentTemplate", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Files.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("FileType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.FamilyMember", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("ByteArrayFiles")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Files.FileTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Files.FileSignature", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "File")
                        .WithMany("Signatures")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("File");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.IdentityDocuments.Bulletin", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Address", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithOne("Bulletin")
                        .HasForeignKey("CODWER.RERU.Personal.Data.Entities.IdentityDocuments.Bulletin", "ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Address", "LivingAddress")
                        .WithMany()
                        .HasForeignKey("LivingAddressId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Address", "ResidenceAddress")
                        .WithMany()
                        .HasForeignKey("ResidenceAddressId");

                    b.Navigation("BirthPlace");

                    b.Navigation("Contractor");

                    b.Navigation("LivingAddress");

                    b.Navigation("ResidenceAddress");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.IndividualContract", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Superior")
                        .WithMany("Contractors")
                        .HasForeignKey("SuperiorId");

                    b.Navigation("Contractor");

                    b.Navigation("File");

                    b.Navigation("Superior");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureColumn", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureType", "NomenclatureType")
                        .WithMany("NomenclatureColumns")
                        .HasForeignKey("NomenclatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.FieldTypeEnum>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NomenclatureType");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureType", "NomenclatureType")
                        .WithMany("NomenclatureRecords")
                        .HasForeignKey("NomenclatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NomenclatureType");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.RecordValues.RecordValue", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureColumn", "NomenclatureColumn")
                        .WithMany()
                        .HasForeignKey("NomenclatureColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "NomenclatureRecord")
                        .WithMany("RecordValues")
                        .HasForeignKey("NomenclatureRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NomenclatureColumn");

                    b.Navigation("NomenclatureRecord");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureType", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.BaseNomenclatureTypesEnum>", null)
                        .WithMany()
                        .HasForeignKey("BaseNomenclature")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.DepartmentRoleRelation", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationalChart", "OrganizationalChart")
                        .WithMany()
                        .HasForeignKey("OrganizationalChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationalChart");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Studies.Study", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("Studies")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.StudyFrequencyEnum>", null)
                        .WithMany()
                        .HasForeignKey("StudyFrequency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", "StudyType")
                        .WithMany()
                        .HasForeignKey("StudyTypeId");

                    b.Navigation("Contractor");

                    b.Navigation("StudyType");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.TimeSheetTables.TimeSheetTable", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithMany("TimeSheetTables")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumWithNumberLookup<CODWER.RERU.Personal.Data.Entities.Enums.TimeSheetValueEnum>", null)
                        .WithMany()
                        .HasForeignKey("Value")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.User.UserProfile", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Contractor", "Contractor")
                        .WithOne("UserProfile")
                        .HasForeignKey("CODWER.RERU.Personal.Data.Entities.User.UserProfile", "ContractorId");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentDepartmentChildDepartment", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "ChildDepartment")
                        .WithMany()
                        .HasForeignKey("ChildDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("ChildDepartment");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentDepartmentChildOrganizationRole", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationRole", "ChildOrganizationRole")
                        .WithMany()
                        .HasForeignKey("ChildOrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("ChildOrganizationRole");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentOrganizationRoleChildDepartment", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.Department", "ChildDepartment")
                        .WithMany()
                        .HasForeignKey("ChildDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationRole", "ParentOrganizationRole")
                        .WithMany()
                        .HasForeignKey("ParentOrganizationRoleId");

                    b.Navigation("ChildDepartment");

                    b.Navigation("ParentOrganizationRole");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.OrganizationRoleRelations.ParentOrganizationRoleChildOrganizationRole", b =>
                {
                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationRole", "ChildOrganizationRole")
                        .WithMany()
                        .HasForeignKey("ChildOrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CODWER.RERU.Personal.Data.Entities.OrganizationRole", "ParentOrganizationRole")
                        .WithMany()
                        .HasForeignKey("ParentOrganizationRoleId");

                    b.Navigation("ChildOrganizationRole");

                    b.Navigation("ParentOrganizationRole");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Contractor", b =>
                {
                    b.Navigation("Attestations");

                    b.Navigation("Avatar");

                    b.Navigation("Badges");

                    b.Navigation("Bonuses");

                    b.Navigation("Bulletin");

                    b.Navigation("ByteArrayFiles");

                    b.Navigation("Contacts");

                    b.Navigation("ContractorDepartments");

                    b.Navigation("Contractors");

                    b.Navigation("Contracts");

                    b.Navigation("Instructions");

                    b.Navigation("Penalizations");

                    b.Navigation("Permission");

                    b.Navigation("Positions");

                    b.Navigation("Ranks");

                    b.Navigation("Studies");

                    b.Navigation("TimeSheetTables");

                    b.Navigation("UserProfile");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.ContractorEvents.Position", b =>
                {
                    b.Navigation("DismissalRequests");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Department", b =>
                {
                    b.Navigation("DepartmentRoleContents");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.Files.ByteArrayFile", b =>
                {
                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureRecords.NomenclatureRecord", b =>
                {
                    b.Navigation("RecordValues");
                });

            modelBuilder.Entity("CODWER.RERU.Personal.Data.Entities.NomenclatureType.NomenclatureType", b =>
                {
                    b.Navigation("NomenclatureColumns");

                    b.Navigation("NomenclatureRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
